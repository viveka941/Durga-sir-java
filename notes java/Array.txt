Introduction
Array Declaration
Array Creation
Array Initialization
Array Declaration , creation 
Anonymous Arrays
Array Element
Array variable assigenment


1.
Introduction-> 
Array-> multipule values same types not to be need maultipale variable we can declear with singal memory
defination -> An Array is index collection fiexd no of homoginious data Element 
-> the main advantage we can represent huge no of values using singal variable so that readbilites of the improvd . but the main Disadvantage of array is fixed in size that is once we carete an array there is no change of incrse or decrease size base on our requirement hance to used array concept compulsary in size in advace, which may not possible always

Disadvantage ->
1.Array are fixed in memory
2.Array can hold homoginious 

One dimensinal declaration->
int []x;✅
int x[];✅
int[] x;✅

int [][] x;
int[][] x;
int x[][];
int[] x[];
int []x[];

Array Creation ->
int [] a = new int[4];
Every array in java is an Object only hence we can create array by using new Operator 

for evey array types crrosponding class are aviable and these class of part of java language and not aviable to the programmer level  
=>Sout(x.getClass().getName()) // out[[i two D aaray 

Array types       Corressponding class name
int []      -> [I
int [][]    -> [[I
double []   -> [D
shrot[] -> [S
byte[] -> [B
boolean [] -> [Z


if the time of array creation comparsalry you should specified size otherwise we will get error
int [] x = new int[];❌
int [] x= new int[6];✅
int [] x = new int[0];✅

if trying to specified array size negative int values than we will get runtime exception saying negativeArraySizeException
int [] x = new int[-4];❌

int [] x = new int[10];
int [] x = new int['a'];✅
byte b  = 20;
int [] x = new int[b];✅
int []x = new int[10L];❌

to specified array size to allowed data types are byte short char int if you are trying to specified any other types than will get compile time error 

int []x = new int[2147483647];✅

int []x = new int[2147483648];❌//CE: Integer number too large 

2D Array  = Matrix (Group of row and column)
2D array creation -> in java 2D array not implimented by using matrix style some people flowlled array of array approach multipuldimesional array creation the main advantage approach is memory utilization imporoved 

int [][][] x = new [2][][];
x[0]= int[2];
x[0][0]= new int[1];
x[0][1]=new int[2];
x[0][2]=new int[3];
x[1]=new int[2][2];

diagame=arr is =  |0|1|
              0=[0|1|2] , 1=[0|1]

which one is true
int[] a = new int[];❌
int[] a = new int[3];✅
int[][] a = new int[][];❌
int[][] a = new int[3][];✅
int[][] a = new int[][4];❌
int[][] a = new int[3][4];✅
int[][][] a = new int[3][4][5];✅
int[][][] a = new int[3][4][];✅
[][][] a = new int[3][][5];❌
int[][][] a = new int[][4][5];❌

Array Initialization
one we carete array every array Element by defualts initializer with defauls values
example-> 
1.int [] x =new int[3];
          sout(x) // [I@3w2
          sout(x[0]) // 0

note->whenever trying to print any reference variable internaly toString methoed will called which is implimented by default to return the String in the fowlling form ->className@hashCode_in_hexadecimalform

2.int [][] x= new int[2][3];  
            [0|1]
            [0|0|0] ,[0|0|0]
  sout(x); [[I@je23
  sout(x[0]); //[I@19238f
  sout(x[0][0]); //0

3. int [][] x = new int[2][];
                [null|null]
                [   ] // not to be decleare
   sout(x);//[[I@12
   sout(x[0]);//null
   sout(x[0][0]); /RE:nullPointException

note-> if you are trying perforem any operation null  then we will get runtime exception: nullPointException

once we create an array every element by defualt initializer with defaults values if we are not satisifed defualt values then we car override values 
with our costomized values
int []x= new int[5];
        [0|0|0|0|0]
int x[0]=10;
int [1] =1;
int [2] =2;
int [3] =3;
int [4] =4;
int [6]=70; RE:ArrayIndexOutOfBoundsSystem
int [-6]=80; RE:ArrayIndexOutOfBoundsSystem

Array Declaration Creation and Initialization in a single line ->
int [] x;
x = new int[3];
x[0]=10;
x[1]=20;
x[2]=30;

int[] x = {10,20,30};
char[] ch = {'a','e','i','o'};
String[] a = {"AB","bd","bds","ds"};

2.                [1|2]
            [10|20],[30|40|60]
  int [][]x={{10,20},{30,40,50}};

3.  int[][][] x ={{{10,20,30},{40,50,60}},
                {{70,80},90,100,110}}
                             [0|1]
                   [0|1],              [0|1]
           [10|20|30],[40,50,60]  [70|80],[90|100|110]
sout(x[0][1][2])=60
sout(x[1][0][1])=80
sout(x[1][0][0])=70
sout(x[2][0][0])=RE:ArrayIndexOutOfBoundsSystem
sout(x[1][2][0])=Re:ArrayIndexOutOfBoundsSystem
sout(x[1][1][1])=100
sout(x[2][1][0])=RE:ArrayIndexOutOfBoundsSystem

int []x ;
x={10,20,30};❌ //RE:illegal start expression
if you decleare multipule line we will get compli tiime error we can define only one line 

length VS length();
length:
        int[] x = new int[6];
        sout(x.length()); //CE: connot find symbol
                          symbol:method length();
                          location:class int[]

        sout(x.length); // 6
    
    length:is a final variable aplicable for aarays 
          but not for String Object
          length variable represent size of array

    String s = "Vivek";
    sout(s.length); //CE: connot find symbol 
    sout(s.length());  // 5

  length(); is a final method aplicable for String Objects but not for aarays length() method return number of characture prsent in the string 

String[] s= {"A","AA","bbb"};
sout(s.length)✅
sout(s.length());❌
sout(s[0].length);❌ CE: connot find symbol variable length
sout(s.[0].length());✅

int[][] x= new int[6][3];
sout(x.length) // 3;

we can create Anonymous as followes
new int[]{10,20,30,40};✅
new int[3]{10,20,30,40};❌
new int[][]{{10,20},{30,40,50}};✅

while creating Anonymous arrays we con't specified the size otherwise we will get compile time error

we can create multipuldimesional Anonymous array also-> new int[][]{{10,20},{30,40,50}};✅


bassed our requirement we can give the name for Anonymous array  then it is no longer Anonymous
int[] x = new int[]{10,20,30};

in the above example just to called some method an array but ofter complete we are not useing anymore hence for this one time requirement Anonymous array bset choice 

Array Element assigenment :
Case 1:
    int[] x = new int[5];
    x[0]=10;
    x[1]='a';
    byte b= 20;
    x[2]=b;
    short c =30;
    x[3]=s;
    x[4]=10L ; // CE: pericission loss 

  
byte -> short -> int -> long -> float -> double
        char  -> int -> long -> float -> double

    note->  in the above case of primitive arrays as array element we can provide any type which can be impleciticly prmoted to declared type


  Case 2 :
  example 1:
          Object[] a = new Object[10];
          a[0] = new Object();
          a[1] = new String("Vivek");
          a[2] = new Integer(10);

  example 2:
          Number[] n = new Number[10];
          n[0] = new Integer[10];
          n[1] = new double(10,5);
          n[2] = new String("vivek"); //CE: incompatiable types Found String;

example 3: 
          Runable[] r = new Runable[10];
          r[0] = new thread();
          r[1] = String("Vive");  //CE: incompatiable types Found String Require j.l:Runable; 
        
        for interface types array element its implimentations class object allowd 

  
Array type                 Allowd element types
primitive Array -> any types which can be impleciticly prmoted to declare types
Object types Array -> Either declare types or tis child class Object allowd
Abstract class type Array -> its child class Ojbect are allowd
Interface typed array -> its implimentations class Object are allowd


Array Veriable assigenment :
int [] x = {10,20,30,40}
char[] ch = {'a','b','c','d'};
int[] b =x;  //✅
int[] c = ch;  //❌ element level are not permoted 
              CE: incompatiable type found: char[] require int[];
           // char[] = [C
           // int[] = [I 

which are permotion will be performed automatically 
char    -> int✅
char [] -> int[]❌
int     -> double✅
int []  -> double[]❌
float   -> int ❌
float[] -> int[]❌
String  -> Object✅
String[] -> Object[]✅

but in case of Object types array child class typs array can be prmoted to parent class type array 

String[] A ={"a","b","c"};
Object[] a = A;✅

CASE 2:
      int[] a = {10,20,30,40,60};
      int[] b = {70,80};
      a = b;✅
      b = a;✅

 whenever we are assigen one array to another array inter element want be copy just reference variable will reassgined 
  
  int[][] a = new int[3][]
  a[0]  = new int[4][3];  //CE: incompatiable types found : int[][] require: int[];
  int[0] = 10; //CE: incompatiable types found :int 
  require int [];

  note -> whenever we are assigen one array to another the dimesion must be matched for example in the place one dimensinal int array we should provide one dimensinal array only
  if trying to provide any other dimesion then we well get compile time error 

note -> whenever we are assigen one array to another aaray both dimesion and types must be matched but sized are not require to match 
int a[0] = new int[2];

int [][] a =new int[4][3];  ->5
a[0] = new int[4];    ->1
a[1] = new int[2];      ->2
a = new int[3][2];        ->4

Q. total how many object create ?
ans. 12
Q. total how many object eligible for Gargbeg collection ans.8

 Types of variable






